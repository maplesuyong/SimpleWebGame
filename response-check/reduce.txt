reduce((a, c) => (a + c))
a: 누적값
c: 현재값
a+c: 반환값

reduce 함수의 인자
1. 첫번째 인자: 적용할 함수
2. 두번째 인자: 초기값
3. 세번째 인자: 각 원소의 인덱스

1. reduce 함수를 이용한 배열 전체 원소의 합
[1, 2, 3, 4].reduce((a, c) => (a + c), 0)
a: 0, c: 1  // reduce 함수의 두번째 인자(초기값)이 처음에 들어온다
a: 1, c: 2
a: 3, c: 3
a: 6, c: 4
return값: 10 (6+4)


2. reduce 함수를 이용한 배열 전체 원소의 곱
[1, 2, 3, 4].reduce((a, c) => (a * c), 1)
a: 1, c: 1  // reduce 함수의 두번째 인자(초기값)이 처음에 들어온다
a: 1, c: 2
a: 2, c: 3
a: 6, c: 4
return값: 24 (6*4)


3. reduce 함수를 이용해 배열로 객체를 만들기
reduce의 세번째 인자로 인덱스가 온다.
['철수', '영희', '민수', '연지'].reduce((a, c, i) => { a[i] = c; return a }, {});
a: {}, c: '철수', i: 0
a: {0: '철수'}, c: '영희', i: 1
a: {0: '철수', 1: '영희'}, c: '민수', i: 2
a: {0: '철수', 1: '영희', 2: '민수'}, c: '연지', i: 3
return값: { 0: "철수", 1: "영희", 2: "민수", 3: "연지" }


4. 두번째 인자인 초기값이 설정되지 않았을때
[1, 2, 3, 4].reduce((a, c) => (a + c));
a: 1, c: 2  // 초기값은 첫번째 원소가 되고, 연산은 두번째 원소부터 적용한다.
a: 3, c: 3
a: 6, c: 4
return값: 10